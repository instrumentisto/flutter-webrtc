// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class FlutterWebrtcNative {
  Future<void> webrtcInit({dynamic hint});

  Future<void> createVideoSink(
      {required int sinkId,
      required int streamId,
      required int callbackPtr,
      dynamic hint});

  Future<void> disposeVideoSink({required int sinkId, dynamic hint});

  Future<List<MediaDeviceInfo>> enumerateDevices({dynamic hint});
}

/// Information describing a single media input or output device.
class MediaDeviceInfo {
  /// Unique identifier for the represented device.
  final String deviceId;

  /// Kind of the represented device.
  final MediaDeviceKind kind;

  /// Label describing the represented device.
  final String label;

  MediaDeviceInfo({
    required this.deviceId,
    required this.kind,
    required this.label,
  });
}

/// Possible kinds of media devices.
enum MediaDeviceKind {
  kAudioInput,
  kAudioOutput,
  kVideoInput,
}

class FlutterWebrtcNativeImpl
    extends FlutterRustBridgeBase<FlutterWebrtcNativeWire>
    implements FlutterWebrtcNative {
  factory FlutterWebrtcNativeImpl(ffi.DynamicLibrary dylib) =>
      FlutterWebrtcNativeImpl.raw(FlutterWebrtcNativeWire(dylib));

  FlutterWebrtcNativeImpl.raw(FlutterWebrtcNativeWire inner) : super(inner);

  Future<void> webrtcInit({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_webrtc_init(port_),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "webrtc_init",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<void> createVideoSink(
          {required int sinkId,
          required int streamId,
          required int callbackPtr,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_create_video_sink(
            port_,
            _api2wire_i64(sinkId),
            _api2wire_u64(streamId),
            _api2wire_u64(callbackPtr)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "create_video_sink",
          argNames: ["sinkId", "streamId", "callbackPtr"],
        ),
        argValues: [sinkId, streamId, callbackPtr],
        hint: hint,
      ));

  Future<void> disposeVideoSink({required int sinkId, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_dispose_video_sink(port_, _api2wire_i64(sinkId)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "dispose_video_sink",
          argNames: ["sinkId"],
        ),
        argValues: [sinkId],
        hint: hint,
      ));

  Future<List<MediaDeviceInfo>> enumerateDevices({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_enumerate_devices(port_),
        parseSuccessData: _wire2api_list_media_device_info,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "enumerate_devices",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  // Section: api2wire
  int _api2wire_i64(int raw) {
    return raw;
  }

  int _api2wire_u64(int raw) {
    return raw;
  }

  // Section: api_fill_to_wire

}

// Section: wire2api
String _wire2api_String(dynamic raw) {
  return raw as String;
}

List<MediaDeviceInfo> _wire2api_list_media_device_info(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_media_device_info).toList();
}

MediaDeviceInfo _wire2api_media_device_info(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 3)
    throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
  return MediaDeviceInfo(
    deviceId: _wire2api_String(arr[0]),
    kind: _wire2api_media_device_kind(arr[1]),
    label: _wire2api_String(arr[2]),
  );
}

MediaDeviceKind _wire2api_media_device_kind(dynamic raw) {
  return MediaDeviceKind.values[raw];
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

void _wire2api_unit(dynamic raw) {
  return;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class FlutterWebrtcNativeWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterWebrtcNativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterWebrtcNativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_webrtc_init(
    int port_,
  ) {
    return _wire_webrtc_init(
      port_,
    );
  }

  late final _wire_webrtc_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_webrtc_init');
  late final _wire_webrtc_init =
      _wire_webrtc_initPtr.asFunction<void Function(int)>();

  void wire_create_video_sink(
    int port_,
    int sink_id,
    int stream_id,
    int callback_ptr,
  ) {
    return _wire_create_video_sink(
      port_,
      sink_id,
      stream_id,
      callback_ptr,
    );
  }

  late final _wire_create_video_sinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int64, ffi.Uint64,
              ffi.Uint64)>>('wire_create_video_sink');
  late final _wire_create_video_sink = _wire_create_video_sinkPtr
      .asFunction<void Function(int, int, int, int)>();

  void wire_dispose_video_sink(
    int port_,
    int sink_id,
  ) {
    return _wire_dispose_video_sink(
      port_,
      sink_id,
    );
  }

  late final _wire_dispose_video_sinkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int64)>>(
          'wire_dispose_video_sink');
  late final _wire_dispose_video_sink =
      _wire_dispose_video_sinkPtr.asFunction<void Function(int, int)>();

  void wire_enumerate_devices(
    int port_,
  ) {
    return _wire_enumerate_devices(
      port_,
    );
  }

  late final _wire_enumerate_devicesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_enumerate_devices');
  late final _wire_enumerate_devices =
      _wire_enumerate_devicesPtr.asFunction<void Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Uint8 Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
