name: CI

on:
  push:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  KTFMT_VER: 0.33
  RUST_BACKTRACE: 1

jobs:

  ################
  # Pull Request #
  ################

  pr:
    needs:
      - build
      - clippy
      - dartanalyze
      - dartfmt
      - ktfmt
      - rustdoc
      - rustfmt
      - test-flutter
      - test-rust
    runs-on: ubuntu-latest
    steps:
      - run: true

  publish:
    if: contains(github.event.head_commit.message, '[publish]') || github.ref_name == 'master'

    needs:
      - build
      - clippy
      - dartanalyze
      - dartfmt
      - ktfmt
      - rustdoc
      - rustfmt
      - test-flutter
      - test-rust

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: subosito/flutter-action@v2

      - uses: actions/download-artifact@v3
        with:
          name: windows
          path: windows/rust/

      - uses: actions/download-artifact@v3
        with:
          name: linux
          path: linux/rust/

      - run: |
          grep 'version:' pubspec.yaml |
          cut -d' ' -f2 |
          {
            read version;
            new_version=${version}.rev.${{ github.sha }};
            date=`date +"%Y-%m-%d"`;
            sed -i "s|$version|$new_version|g" pubspec.yaml;
            sed -i "4s|^|[${new_version}] - ${date}\n\n* Development.\n\n|" CHANGELOG.md;
          }

      - run: flutter pub publish -n



  ##########################
  # Linting and formatting #
  ##########################

  clippy:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux
            os: ubuntu-22.04
#         TODO: Add macos-latest.
#          - platform: macos
#            os: macos-latest
          - platform: windows
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpulse-dev libudev-dev libxfixes-dev \
            libxdamage-dev libxtst-dev libxrandr-dev libxcomposite-dev
        if: ${{ matrix.platform == 'linux' }}

      - run: make cargo.lint

  dartanalyze:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2

      - run: flutter pub get

      - run: make flutter.analyze

  dartfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2

      - run: flutter pub get

      - run: make flutter.fmt check=yes

  ktfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: "17"

      - name: Install ktfmt
        run: wget -O ktfmt.jar https://search.maven.org/remotecontent?filepath=com/facebook/ktfmt/${{ env.KTFMT_VER }}/ktfmt-${{ env.KTFMT_VER }}-jar-with-dependencies.jar

      - name: Check ktfmt
        run: java -jar ktfmt.jar --set-exit-if-changed android/src/main/kotlin/

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt

      - run: make cargo.fmt check=yes




  ############
  # Building #
  ############

  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux
            os: ubuntu-22.04
#         TODO: Add macos-latest.
#          - platform: macos
#            os: macos-latest
          - platform: windows
            os: windows-2019
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - uses: subosito/flutter-action@v2
      - run: flutter config --enable-${{ matrix.platform }}-desktop

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev ninja-build libpulse-dev \
            libudev-dev libxfixes-dev libxdamage-dev libxtst-dev \
            libxrandr-dev libxcomposite-dev
        if: matrix.platform == 'linux'

      - run: make cargo.build
      - run: make flutter.build platform=${{ matrix.platform }}

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform }}
          path: ${{ matrix.platform }}/rust/




  ###########
  # Testing #
  ###########

  test-flutter:
    name: Test Flutter integration
    needs: ["build"]
    strategy:
      fail-fast: false
      matrix:
        include:
#         TODO: Add MacOs support.
#          - platform: macos
#            os: macos-latest
          - platform: android
            os: macos-latest
          - platform: windows
            # TODO: Switch to `windows-latest` when stable Flutter stable will
            #       support MSVC 2022:
            #       https://github.com/flutter/flutter/issues/85922
            #       https://github.com/flutter/flutter/issues/96138
            os: windows-2019
          - platform: linux
            os: ubuntu-22.04
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - uses: subosito/flutter-action@v2

      - run: flutter config --enable-${{ matrix.platform }}-desktop
        if: matrix.platform != 'android'

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
               cmake libgtk-3-dev liblzma-dev libpulse-dev ninja-build \
                libudev-dev xvfb
        if: matrix.platform == 'linux'

      - run: make cargo.build platform=${{ matrix.platform }}
                              args="--features fake_media"
        if: matrix.platform != 'android'

      - name: Test on Android
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 24
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          script: make flutter.test
        if: matrix.platform == 'android'

      - run: xvfb-run -a make flutter.test device=linux
        if: matrix.platform == 'linux'

      - run: make flutter.test device=windows
        if: matrix.platform == 'windows'

  test-rust:
    name: Test Rust crates
    # TODO: Switch to `windows-latest` when stable Flutter stable will
    #       support MSVC 2022:
    #       https://github.com/flutter/flutter/issues/85922
    #       https://github.com/flutter/flutter/issues/96138
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - run: make cargo.test




  #################
  # Documentation #
  #################

  rustdoc:
    strategy:
      fail-fast: false
      matrix:
        os:
          # TODO: Switch to `windows-latest` when stable Flutter stable will
          #       support MSVC 2022:
          #       https://github.com/flutter/flutter/issues/85922
          #       https://github.com/flutter/flutter/issues/96138
          - windows-2019
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - run: make cargo.doc
