name: CI

on:
  push:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  KTFMT_VER: 0.33
  RUST_BACKTRACE: 1

jobs:

  ################
  # Pull Request #
  ################

  pr:
    if: ${{ github.event_name == 'pull_request' }}
    needs:
      - build
      - clippy
      - dartanalyze
      - dartfmt
      - ktfmt
      - rustdoc
      - rustfmt
      - test-flutter
    runs-on: ubuntu-latest
    steps:
      - run: true




  ##########################
  # Linting and formatting #
  ##########################

  clippy:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux
          #- macos  # TODO: Add `macos-latest`.
          - windows
    runs-on: ${{ (matrix.platform == 'linux' && 'ubuntu-22.04')
                 || (matrix.platform == 'windows' && 'windows-2019')
                 || 'macos-latest' }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy

      - name: Install Linux platform dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
                       libgtk-3-dev libpulse-dev libudev-dev libxcomposite-dev \
                       libxdamage-dev libxfixes-dev libxrandr-dev libxtst-dev \
                       ninja-build
        if: ${{ matrix.platform == 'linux' }}

      - run: make cargo.lint

  dartanalyze:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2

      - run: flutter pub get

      - run: make flutter.analyze

  dartfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2

      - run: flutter pub get

      - run: make flutter.fmt check=yes

  ktfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: "17"

      - name: Install ktfmt
        run: wget -O ktfmt.jar https://search.maven.org/remotecontent?filepath=com/facebook/ktfmt/${{ env.KTFMT_VER }}/ktfmt-${{ env.KTFMT_VER }}-jar-with-dependencies.jar

      - name: Check ktfmt
        run: java -jar ktfmt.jar --set-exit-if-changed android/src/main/kotlin/

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt

      - run: make cargo.fmt check=yes




  ############
  # Building #
  ############

  build:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux
          #- macos  # TODO: Add `macos-latest`.
          - windows
    runs-on: ${{ (matrix.platform == 'linux' && 'ubuntu-22.04')
                 || (matrix.platform == 'windows' && 'windows-2019')
                 || 'macos-latest' }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - uses: subosito/flutter-action@v2
      - run: flutter config --enable-${{ matrix.platform }}-desktop

      - name: Install Linux platform dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
                       libgtk-3-dev libpulse-dev libudev-dev libxcomposite-dev \
                       libxdamage-dev libxfixes-dev libxrandr-dev libxtst-dev \
                       ninja-build
        if: ${{ matrix.platform == 'linux' }}

      - run: make cargo.build debug=no
      - run: make flutter.build platform=${{ matrix.platform }}

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform }}
          path: ${{ matrix.platform }}/rust/




  ###########
  # Testing #
  ###########

  test-flutter:
    name: Test Flutter integration
    needs: ["build"]
    strategy:
      fail-fast: false
      matrix:
        platform:
          - android
          - linux
          #- macos  # TODO: Add `macos-latest`.
          - windows
    # TODO: Switch to `windows-latest` once stable Flutter supports MSVC 2022:
    #       https://github.com/flutter/flutter/issues/85922
    #       https://github.com/flutter/flutter/issues/96138
    runs-on: ${{ (matrix.platform == 'linux' && 'ubuntu-22.04')
                 || (matrix.platform == 'windows' && 'windows-2019')
                 || 'macos-latest' }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - uses: subosito/flutter-action@v2
      - run: flutter config --enable-${{ matrix.platform }}-desktop
        if: ${{ matrix.platform != 'android' }}

      - name: Install Linux platform dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
                       cmake \
                       libgtk-3-dev liblzma-dev libpulse-dev libudev-dev \
                       ninja-build \
                       xvfb
        if: ${{ matrix.platform == 'linux' }}

      - run: make cargo.build platform=${{ matrix.platform }}
                              args="--features fake_media"
        if: ${{ matrix.platform != 'android' }}

      - name: Test on Android
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 24
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          script: make flutter.test
        if: ${{ matrix.platform == 'android' }}

      - name: Test on Linux
        run: xvfb-run -a make flutter.test device=linux
        if: ${{ matrix.platform == 'linux' }}

      - name: Test on Windows
        run: make flutter.test device=windows
        if: ${{ matrix.platform == 'windows' }}




  #################
  # Documentation #
  #################

  rustdoc:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux
          #- macos  # TODO: Add `macos-latest`.
          - windows
    # TODO: Switch to `windows-latest` once stable Flutter supports MSVC 2022:
    #       https://github.com/flutter/flutter/issues/85922
    #       https://github.com/flutter/flutter/issues/96138
    runs-on: ${{ (matrix.platform == 'linux' && 'ubuntu-22.04')
                 || (matrix.platform == 'windows' && 'windows-2019')
                 || 'macos-latest' }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Install Linux platform dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
                       libgtk-3-dev libpulse-dev libudev-dev libxcomposite-dev \
                       libxdamage-dev libxfixes-dev libxrandr-dev libxtst-dev \
                       ninja-build
        if: ${{ matrix.platform == 'linux' }}

      - run: make cargo.doc




  #############
  # Releasing #
  #############

  publish:
    if: ${{ startsWith(github.ref, 'refs/tags/')
      || contains(github.event.head_commit.message, '[publish]')
      || github.ref_name == 'master' }}

    needs:
      - build
      - clippy
      - dartanalyze
      - dartfmt
      - ktfmt
      - rustdoc
      - rustfmt
      - test-flutter

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: subosito/flutter-action@v2

      - uses: actions/download-artifact@v3
        with:
          name: windows
          path: windows/rust/

      - uses: actions/download-artifact@v3
        with:
          name: linux
          path: linux/rust/

      - name: Change version to commit SHA
      - run: |
          grep 'version:' pubspec.yaml | cut -d' ' -f2 |
          {
            read version;
            new_version=${version}.rev.${{ github.sha }};
            sed -i "s|$version|$new_version|g" pubspec.yaml;
          }
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}

      - name: Create auth token
      - run: echo ${{ secrets.PUBDEV_CREDS }} | base64 --decode > "$FLUTTER_ROOT/.pub-cache/credentials.json"

      - name: Publish to pub.dev
      - run: flutter pub publish -f
