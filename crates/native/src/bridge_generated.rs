#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.81.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::{rust2dart::IntoIntoDart, *};
use std::{ffi::c_void, sync::Arc};

// Section: imports

use crate::renderer::TextureEvent;

// Section: wire functions

fn wire_enable_fake_media_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "enable_fake_media",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(enable_fake_media()),
    )
}
fn wire_is_fake_media_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool>(
        WrapInfo {
            debug_name: "is_fake_media",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(is_fake_media()),
    )
}
fn wire_enumerate_devices_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<MediaDeviceInfo>>(
        WrapInfo {
            debug_name: "enumerate_devices",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| enumerate_devices(),
    )
}
fn wire_enumerate_displays_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<MediaDisplayInfo>>(
        WrapInfo {
            debug_name: "enumerate_displays",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(enumerate_displays()),
    )
}
fn wire_create_peer_connection_impl(
    port_: MessagePort,
    configuration: impl Wire2Api<RtcConfiguration> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "create_peer_connection",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_configuration = configuration.wire2api();
            move |task_callback| {
                create_peer_connection(
                    task_callback.stream_sink::<_, PeerConnectionEvent>(),
                    api_configuration,
                )
            }
        },
    )
}
fn wire_create_offer_impl(
    port_: MessagePort,
    peer: impl Wire2Api<RustOpaque<Arc<PeerConnection>>> + UnwindSafe,
    voice_activity_detection: impl Wire2Api<bool> + UnwindSafe,
    ice_restart: impl Wire2Api<bool> + UnwindSafe,
    use_rtp_mux: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, RtcSessionDescription>(
        WrapInfo {
            debug_name: "create_offer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer = peer.wire2api();
            let api_voice_activity_detection =
                voice_activity_detection.wire2api();
            let api_ice_restart = ice_restart.wire2api();
            let api_use_rtp_mux = use_rtp_mux.wire2api();
            move |task_callback| {
                create_offer(
                    api_peer,
                    api_voice_activity_detection,
                    api_ice_restart,
                    api_use_rtp_mux,
                )
            }
        },
    )
}
fn wire_create_answer_impl(
    port_: MessagePort,
    peer: impl Wire2Api<RustOpaque<Arc<PeerConnection>>> + UnwindSafe,
    voice_activity_detection: impl Wire2Api<bool> + UnwindSafe,
    ice_restart: impl Wire2Api<bool> + UnwindSafe,
    use_rtp_mux: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, RtcSessionDescription>(
        WrapInfo {
            debug_name: "create_answer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer = peer.wire2api();
            let api_voice_activity_detection =
                voice_activity_detection.wire2api();
            let api_ice_restart = ice_restart.wire2api();
            let api_use_rtp_mux = use_rtp_mux.wire2api();
            move |task_callback| {
                create_answer(
                    api_peer,
                    api_voice_activity_detection,
                    api_ice_restart,
                    api_use_rtp_mux,
                )
            }
        },
    )
}
fn wire_create_transceiver_init_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER
        .wrap::<_, _, _, RustOpaque<Arc<RtpTransceiverInit>>>(
            WrapInfo {
                debug_name: "create_transceiver_init",
                port: Some(port_),
                mode: FfiCallMode::Normal,
            },
            move || move |task_callback| Ok(create_transceiver_init()),
        )
}
fn wire_set_transceiver_init_direction_impl(
    port_: MessagePort,
    init: impl Wire2Api<RustOpaque<Arc<RtpTransceiverInit>>> + UnwindSafe,
    direction: impl Wire2Api<RtpTransceiverDirection> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "set_transceiver_init_direction",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_init = init.wire2api();
            let api_direction = direction.wire2api();
            move |task_callback| {
                Ok(set_transceiver_init_direction(api_init, api_direction))
            }
        },
    )
}
fn wire_add_transceiver_init_send_encoding_impl(
    port_: MessagePort,
    init: impl Wire2Api<RustOpaque<Arc<RtpTransceiverInit>>> + UnwindSafe,
    enc: impl Wire2Api<RustOpaque<Arc<RtpEncodingParameters>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "add_transceiver_init_send_encoding",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_init = init.wire2api();
            let api_enc = enc.wire2api();
            move |task_callback| {
                Ok(add_transceiver_init_send_encoding(api_init, api_enc))
            }
        },
    )
}
fn wire_create_encoding_parameters_impl(
    port_: MessagePort,
    rid: impl Wire2Api<String> + UnwindSafe,
    active: impl Wire2Api<bool> + UnwindSafe,
    max_bitrate: impl Wire2Api<Option<i32>> + UnwindSafe,
    max_framerate: impl Wire2Api<Option<f64>> + UnwindSafe,
    scale_resolution_down_by: impl Wire2Api<Option<f64>> + UnwindSafe,
    scalability_mode: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER
        .wrap::<_, _, _, RustOpaque<Arc<RtpEncodingParameters>>>(
            WrapInfo {
                debug_name: "create_encoding_parameters",
                port: Some(port_),
                mode: FfiCallMode::Normal,
            },
            move || {
                let api_rid = rid.wire2api();
                let api_active = active.wire2api();
                let api_max_bitrate = max_bitrate.wire2api();
                let api_max_framerate = max_framerate.wire2api();
                let api_scale_resolution_down_by =
                    scale_resolution_down_by.wire2api();
                let api_scalability_mode = scalability_mode.wire2api();
                move |task_callback| {
                    Ok(create_encoding_parameters(
                        api_rid,
                        api_active,
                        api_max_bitrate,
                        api_max_framerate,
                        api_scale_resolution_down_by,
                        api_scalability_mode,
                    ))
                }
            },
        )
}
fn wire_set_local_description_impl(
    port_: MessagePort,
    peer: impl Wire2Api<RustOpaque<Arc<PeerConnection>>> + UnwindSafe,
    kind: impl Wire2Api<SdpType> + UnwindSafe,
    sdp: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "set_local_description",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer = peer.wire2api();
            let api_kind = kind.wire2api();
            let api_sdp = sdp.wire2api();
            move |task_callback| {
                set_local_description(api_peer, api_kind, api_sdp)
            }
        },
    )
}
fn wire_set_remote_description_impl(
    port_: MessagePort,
    peer: impl Wire2Api<RustOpaque<Arc<PeerConnection>>> + UnwindSafe,
    kind: impl Wire2Api<SdpType> + UnwindSafe,
    sdp: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "set_remote_description",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer = peer.wire2api();
            let api_kind = kind.wire2api();
            let api_sdp = sdp.wire2api();
            move |task_callback| {
                set_remote_description(api_peer, api_kind, api_sdp)
            }
        },
    )
}
fn wire_add_transceiver_impl(
    port_: MessagePort,
    peer: impl Wire2Api<RustOpaque<Arc<PeerConnection>>> + UnwindSafe,
    media_type: impl Wire2Api<MediaType> + UnwindSafe,
    init: impl Wire2Api<RustOpaque<Arc<RtpTransceiverInit>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, RtcRtpTransceiver>(
        WrapInfo {
            debug_name: "add_transceiver",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer = peer.wire2api();
            let api_media_type = media_type.wire2api();
            let api_init = init.wire2api();
            move |task_callback| {
                add_transceiver(api_peer, api_media_type, api_init)
            }
        },
    )
}
fn wire_get_transceivers_impl(
    port_: MessagePort,
    peer: impl Wire2Api<RustOpaque<Arc<PeerConnection>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<RtcRtpTransceiver>>(
        WrapInfo {
            debug_name: "get_transceivers",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer = peer.wire2api();
            move |task_callback| Ok(get_transceivers(api_peer))
        },
    )
}
fn wire_set_transceiver_direction_impl(
    transceiver: impl Wire2Api<RustOpaque<Arc<RtpTransceiver>>> + UnwindSafe,
    direction: impl Wire2Api<RtpTransceiverDirection> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "set_transceiver_direction",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_transceiver = transceiver.wire2api();
            let api_direction = direction.wire2api();
            set_transceiver_direction(api_transceiver, api_direction)
        },
    )
}
fn wire_set_transceiver_recv_impl(
    transceiver: impl Wire2Api<RustOpaque<Arc<RtpTransceiver>>> + UnwindSafe,
    recv: impl Wire2Api<bool> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "set_transceiver_recv",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_transceiver = transceiver.wire2api();
            let api_recv = recv.wire2api();
            set_transceiver_recv(api_transceiver, api_recv)
        },
    )
}
fn wire_set_transceiver_send_impl(
    transceiver: impl Wire2Api<RustOpaque<Arc<RtpTransceiver>>> + UnwindSafe,
    send: impl Wire2Api<bool> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "set_transceiver_send",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_transceiver = transceiver.wire2api();
            let api_send = send.wire2api();
            set_transceiver_send(api_transceiver, api_send)
        },
    )
}
fn wire_get_transceiver_mid_impl(
    port_: MessagePort,
    transceiver: impl Wire2Api<RustOpaque<Arc<RtpTransceiver>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<String>>(
        WrapInfo {
            debug_name: "get_transceiver_mid",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_transceiver = transceiver.wire2api();
            move |task_callback| Ok(get_transceiver_mid(api_transceiver))
        },
    )
}
fn wire_get_transceiver_direction_impl(
    port_: MessagePort,
    transceiver: impl Wire2Api<RustOpaque<Arc<RtpTransceiver>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, RtpTransceiverDirection>(
        WrapInfo {
            debug_name: "get_transceiver_direction",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_transceiver = transceiver.wire2api();
            move |task_callback| Ok(get_transceiver_direction(api_transceiver))
        },
    )
}
fn wire_get_peer_stats_impl(
    port_: MessagePort,
    peer: impl Wire2Api<RustOpaque<Arc<PeerConnection>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<RtcStats>>(
        WrapInfo {
            debug_name: "get_peer_stats",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer = peer.wire2api();
            move |task_callback| get_peer_stats(api_peer)
        },
    )
}
fn wire_stop_transceiver_impl(
    port_: MessagePort,
    transceiver: impl Wire2Api<RustOpaque<Arc<RtpTransceiver>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "stop_transceiver",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_transceiver = transceiver.wire2api();
            move |task_callback| stop_transceiver(api_transceiver)
        },
    )
}
fn wire_sender_replace_track_impl(
    port_: MessagePort,
    peer: impl Wire2Api<RustOpaque<Arc<PeerConnection>>> + UnwindSafe,
    transceiver: impl Wire2Api<RustOpaque<Arc<RtpTransceiver>>> + UnwindSafe,
    track_id: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "sender_replace_track",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer = peer.wire2api();
            let api_transceiver = transceiver.wire2api();
            let api_track_id = track_id.wire2api();
            move |task_callback| {
                sender_replace_track(api_peer, api_transceiver, api_track_id)
            }
        },
    )
}
fn wire_add_ice_candidate_impl(
    port_: MessagePort,
    peer: impl Wire2Api<RustOpaque<Arc<PeerConnection>>> + UnwindSafe,
    candidate: impl Wire2Api<String> + UnwindSafe,
    sdp_mid: impl Wire2Api<String> + UnwindSafe,
    sdp_mline_index: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "add_ice_candidate",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer = peer.wire2api();
            let api_candidate = candidate.wire2api();
            let api_sdp_mid = sdp_mid.wire2api();
            let api_sdp_mline_index = sdp_mline_index.wire2api();
            move |task_callback| {
                add_ice_candidate(
                    api_peer,
                    api_candidate,
                    api_sdp_mid,
                    api_sdp_mline_index,
                )
            }
        },
    )
}
fn wire_restart_ice_impl(
    port_: MessagePort,
    peer: impl Wire2Api<RustOpaque<Arc<PeerConnection>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "restart_ice",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer = peer.wire2api();
            move |task_callback| Ok(restart_ice(api_peer))
        },
    )
}
fn wire_dispose_peer_connection_impl(
    port_: MessagePort,
    peer: impl Wire2Api<RustOpaque<Arc<PeerConnection>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "dispose_peer_connection",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer = peer.wire2api();
            move |task_callback| Ok(dispose_peer_connection(api_peer))
        },
    )
}
fn wire_get_media_impl(
    port_: MessagePort,
    constraints: impl Wire2Api<MediaStreamConstraints> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, GetMediaResult>(
        WrapInfo {
            debug_name: "get_media",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_constraints = constraints.wire2api();
            move |task_callback| Ok(get_media(api_constraints))
        },
    )
}
fn wire_set_audio_playout_device_impl(
    port_: MessagePort,
    device_id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "set_audio_playout_device",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_device_id = device_id.wire2api();
            move |task_callback| set_audio_playout_device(api_device_id)
        },
    )
}
fn wire_microphone_volume_is_available_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool>(
        WrapInfo {
            debug_name: "microphone_volume_is_available",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| microphone_volume_is_available(),
    )
}
fn wire_set_microphone_volume_impl(
    port_: MessagePort,
    level: impl Wire2Api<u8> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "set_microphone_volume",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_level = level.wire2api();
            move |task_callback| set_microphone_volume(api_level)
        },
    )
}
fn wire_microphone_volume_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32>(
        WrapInfo {
            debug_name: "microphone_volume",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| microphone_volume(),
    )
}
fn wire_dispose_track_impl(
    port_: MessagePort,
    track_id: impl Wire2Api<String> + UnwindSafe,
    kind: impl Wire2Api<MediaType> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "dispose_track",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_track_id = track_id.wire2api();
            let api_kind = kind.wire2api();
            move |task_callback| Ok(dispose_track(api_track_id, api_kind))
        },
    )
}
fn wire_track_state_impl(
    port_: MessagePort,
    track_id: impl Wire2Api<String> + UnwindSafe,
    kind: impl Wire2Api<MediaType> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, TrackState>(
        WrapInfo {
            debug_name: "track_state",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_track_id = track_id.wire2api();
            let api_kind = kind.wire2api();
            move |task_callback| track_state(api_track_id, api_kind)
        },
    )
}
fn wire_set_track_enabled_impl(
    port_: MessagePort,
    track_id: impl Wire2Api<String> + UnwindSafe,
    kind: impl Wire2Api<MediaType> + UnwindSafe,
    enabled: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "set_track_enabled",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_track_id = track_id.wire2api();
            let api_kind = kind.wire2api();
            let api_enabled = enabled.wire2api();
            move |task_callback| {
                set_track_enabled(api_track_id, api_kind, api_enabled)
            }
        },
    )
}
fn wire_clone_track_impl(
    port_: MessagePort,
    track_id: impl Wire2Api<String> + UnwindSafe,
    kind: impl Wire2Api<MediaType> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, MediaStreamTrack>(
        WrapInfo {
            debug_name: "clone_track",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_track_id = track_id.wire2api();
            let api_kind = kind.wire2api();
            move |task_callback| clone_track(api_track_id, api_kind)
        },
    )
}
fn wire_register_track_observer_impl(
    port_: MessagePort,
    track_id: impl Wire2Api<String> + UnwindSafe,
    kind: impl Wire2Api<MediaType> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "register_track_observer",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_track_id = track_id.wire2api();
            let api_kind = kind.wire2api();
            move |task_callback| {
                register_track_observer(
                    task_callback.stream_sink::<_, TrackEvent>(),
                    api_track_id,
                    api_kind,
                )
            }
        },
    )
}
fn wire_set_on_device_changed_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "set_on_device_changed",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                set_on_device_changed(task_callback.stream_sink::<_, ()>())
            }
        },
    )
}
fn wire_create_video_sink_impl(
    port_: MessagePort,
    sink_id: impl Wire2Api<i64> + UnwindSafe,
    track_id: impl Wire2Api<String> + UnwindSafe,
    callback_ptr: impl Wire2Api<u64> + UnwindSafe,
    texture_id: impl Wire2Api<i64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "create_video_sink",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_sink_id = sink_id.wire2api();
            let api_track_id = track_id.wire2api();
            let api_callback_ptr = callback_ptr.wire2api();
            let api_texture_id = texture_id.wire2api();
            move |task_callback| {
                create_video_sink(
                    task_callback.stream_sink::<_, TextureEvent>(),
                    api_sink_id,
                    api_track_id,
                    api_callback_ptr,
                    api_texture_id,
                )
            }
        },
    )
}
fn wire_dispose_video_sink_impl(
    port_: MessagePort,
    sink_id: impl Wire2Api<i64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "dispose_video_sink",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_sink_id = sink_id.wire2api();
            move |task_callback| Ok(dispose_video_sink(api_sink_id))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<BundlePolicy> for i32 {
    fn wire2api(self) -> BundlePolicy {
        match self {
            0 => BundlePolicy::Balanced,
            1 => BundlePolicy::MaxBundle,
            2 => BundlePolicy::MaxCompat,
            _ => unreachable!("Invalid variant for BundlePolicy: {}", self),
        }
    }
}
impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}
impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}
impl Wire2Api<IceTransportsType> for i32 {
    fn wire2api(self) -> IceTransportsType {
        match self {
            0 => IceTransportsType::All,
            1 => IceTransportsType::Relay,
            2 => IceTransportsType::NoHost,
            3 => IceTransportsType::None,
            _ => {
                unreachable!("Invalid variant for IceTransportsType: {}", self)
            }
        }
    }
}

impl Wire2Api<MediaType> for i32 {
    fn wire2api(self) -> MediaType {
        match self {
            0 => MediaType::Audio,
            1 => MediaType::Video,
            _ => unreachable!("Invalid variant for MediaType: {}", self),
        }
    }
}

impl Wire2Api<RtpTransceiverDirection> for i32 {
    fn wire2api(self) -> RtpTransceiverDirection {
        match self {
            0 => RtpTransceiverDirection::SendRecv,
            1 => RtpTransceiverDirection::SendOnly,
            2 => RtpTransceiverDirection::RecvOnly,
            3 => RtpTransceiverDirection::Inactive,
            4 => RtpTransceiverDirection::Stopped,
            _ => unreachable!(
                "Invalid variant for RtpTransceiverDirection: {}",
                self
            ),
        }
    }
}
impl Wire2Api<SdpType> for i32 {
    fn wire2api(self) -> SdpType {
        match self {
            0 => SdpType::Offer,
            1 => SdpType::PrAnswer,
            2 => SdpType::Answer,
            3 => SdpType::Rollback,
            _ => unreachable!("Invalid variant for SdpType: {}", self),
        }
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for CandidateType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Host => 0,
            Self::Srflx => 1,
            Self::Prflx => 2,
            Self::Relay => 3,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CandidateType {}
impl rust2dart::IntoIntoDart<CandidateType> for CandidateType {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for GetMediaError {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Audio(field0) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            Self::Video(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GetMediaError {}
impl rust2dart::IntoIntoDart<GetMediaError> for GetMediaError {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for GetMediaResult {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Ok(field0) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            Self::Err(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GetMediaResult {}
impl rust2dart::IntoIntoDart<GetMediaResult> for GetMediaResult {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for IceCandidateStats {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.transport_id.into_dart(),
            self.address.into_dart(),
            self.port.into_dart(),
            self.protocol.into_into_dart().into_dart(),
            self.candidate_type.into_into_dart().into_dart(),
            self.priority.into_dart(),
            self.url.into_dart(),
            self.relay_protocol.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for IceCandidateStats {}
impl rust2dart::IntoIntoDart<IceCandidateStats> for IceCandidateStats {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for IceConnectionState {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::New => 0,
            Self::Checking => 1,
            Self::Connected => 2,
            Self::Completed => 3,
            Self::Failed => 4,
            Self::Disconnected => 5,
            Self::Closed => 6,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for IceConnectionState {}
impl rust2dart::IntoIntoDart<IceConnectionState> for IceConnectionState {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for IceGatheringState {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::New => 0,
            Self::Gathering => 1,
            Self::Complete => 2,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for IceGatheringState {}
impl rust2dart::IntoIntoDart<IceGatheringState> for IceGatheringState {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for IceRole {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Unknown => 0,
            Self::Controlling => 1,
            Self::Controlled => 2,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for IceRole {}
impl rust2dart::IntoIntoDart<IceRole> for IceRole {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for MediaDeviceInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.device_id.into_into_dart().into_dart(),
            self.kind.into_into_dart().into_dart(),
            self.label.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MediaDeviceInfo {}
impl rust2dart::IntoIntoDart<MediaDeviceInfo> for MediaDeviceInfo {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for MediaDeviceKind {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::AudioInput => 0,
            Self::AudioOutput => 1,
            Self::VideoInput => 2,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MediaDeviceKind {}
impl rust2dart::IntoIntoDart<MediaDeviceKind> for MediaDeviceKind {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for MediaDisplayInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.device_id.into_into_dart().into_dart(),
            self.title.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MediaDisplayInfo {}
impl rust2dart::IntoIntoDart<MediaDisplayInfo> for MediaDisplayInfo {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for MediaStreamTrack {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.device_id.into_into_dart().into_dart(),
            self.kind.into_into_dart().into_dart(),
            self.enabled.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MediaStreamTrack {}
impl rust2dart::IntoIntoDart<MediaStreamTrack> for MediaStreamTrack {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for MediaType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Audio => 0,
            Self::Video => 1,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MediaType {}
impl rust2dart::IntoIntoDart<MediaType> for MediaType {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for PeerConnectionEvent {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::PeerCreated { peer } => vec![0.into_dart(), peer.into_dart()],
            Self::IceCandidate {
                sdp_mid,
                sdp_mline_index,
                candidate,
            } => vec![
                1.into_dart(),
                sdp_mid.into_into_dart().into_dart(),
                sdp_mline_index.into_into_dart().into_dart(),
                candidate.into_into_dart().into_dart(),
            ],
            Self::IceGatheringStateChange(field0) => {
                vec![2.into_dart(), field0.into_into_dart().into_dart()]
            }
            Self::IceCandidateError {
                address,
                port,
                url,
                error_code,
                error_text,
            } => vec![
                3.into_dart(),
                address.into_into_dart().into_dart(),
                port.into_into_dart().into_dart(),
                url.into_into_dart().into_dart(),
                error_code.into_into_dart().into_dart(),
                error_text.into_into_dart().into_dart(),
            ],
            Self::NegotiationNeeded => vec![4.into_dart()],
            Self::SignallingChange(field0) => {
                vec![5.into_dart(), field0.into_into_dart().into_dart()]
            }
            Self::IceConnectionStateChange(field0) => {
                vec![6.into_dart(), field0.into_into_dart().into_dart()]
            }
            Self::ConnectionStateChange(field0) => {
                vec![7.into_dart(), field0.into_into_dart().into_dart()]
            }
            Self::Track(field0) => {
                vec![8.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PeerConnectionEvent {}
impl rust2dart::IntoIntoDart<PeerConnectionEvent> for PeerConnectionEvent {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for PeerConnectionState {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::New => 0,
            Self::Connecting => 1,
            Self::Connected => 2,
            Self::Disconnected => 3,
            Self::Failed => 4,
            Self::Closed => 5,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PeerConnectionState {}
impl rust2dart::IntoIntoDart<PeerConnectionState> for PeerConnectionState {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for Protocol {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Tcp => 0,
            Self::Udp => 1,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Protocol {}
impl rust2dart::IntoIntoDart<Protocol> for Protocol {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for RtcIceCandidateStats {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Local(field0) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            Self::Remote(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RtcIceCandidateStats {}
impl rust2dart::IntoIntoDart<RtcIceCandidateStats> for RtcIceCandidateStats {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for RtcInboundRtpStreamMediaType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Audio {
                voice_activity_flag,
                total_samples_received,
                concealed_samples,
                silent_concealed_samples,
                audio_level,
                total_audio_energy,
                total_samples_duration,
            } => vec![
                0.into_dart(),
                voice_activity_flag.into_dart(),
                total_samples_received.into_dart(),
                concealed_samples.into_dart(),
                silent_concealed_samples.into_dart(),
                audio_level.into_dart(),
                total_audio_energy.into_dart(),
                total_samples_duration.into_dart(),
            ],
            Self::Video {
                frames_decoded,
                key_frames_decoded,
                frame_width,
                frame_height,
                total_inter_frame_delay,
                frames_per_second,
                fir_count,
                pli_count,
                sli_count,
                concealment_events,
                frames_received,
            } => vec![
                1.into_dart(),
                frames_decoded.into_dart(),
                key_frames_decoded.into_dart(),
                frame_width.into_dart(),
                frame_height.into_dart(),
                total_inter_frame_delay.into_dart(),
                frames_per_second.into_dart(),
                fir_count.into_dart(),
                pli_count.into_dart(),
                sli_count.into_dart(),
                concealment_events.into_dart(),
                frames_received.into_dart(),
            ],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RtcInboundRtpStreamMediaType {}
impl rust2dart::IntoIntoDart<RtcInboundRtpStreamMediaType>
    for RtcInboundRtpStreamMediaType
{
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for RtcMediaSourceStatsMediaType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::RtcVideoSourceStats {
                width,
                height,
                frames,
                frames_per_second,
            } => vec![
                0.into_dart(),
                width.into_dart(),
                height.into_dart(),
                frames.into_dart(),
                frames_per_second.into_dart(),
            ],
            Self::RtcAudioSourceStats {
                audio_level,
                total_audio_energy,
                total_samples_duration,
                echo_return_loss,
                echo_return_loss_enhancement,
            } => vec![
                1.into_dart(),
                audio_level.into_dart(),
                total_audio_energy.into_dart(),
                total_samples_duration.into_dart(),
                echo_return_loss.into_dart(),
                echo_return_loss_enhancement.into_dart(),
            ],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RtcMediaSourceStatsMediaType {}
impl rust2dart::IntoIntoDart<RtcMediaSourceStatsMediaType>
    for RtcMediaSourceStatsMediaType
{
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for RtcOutboundRtpStreamStatsMediaType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Audio {
                total_samples_sent,
                voice_activity_flag,
            } => vec![
                0.into_dart(),
                total_samples_sent.into_dart(),
                voice_activity_flag.into_dart(),
            ],
            Self::Video {
                frame_width,
                frame_height,
                frames_per_second,
            } => vec![
                1.into_dart(),
                frame_width.into_dart(),
                frame_height.into_dart(),
                frames_per_second.into_dart(),
            ],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RtcOutboundRtpStreamStatsMediaType {}
impl rust2dart::IntoIntoDart<RtcOutboundRtpStreamStatsMediaType>
    for RtcOutboundRtpStreamStatsMediaType
{
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for RtcRtpTransceiver {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.peer.into_dart(),
            self.transceiver.into_dart(),
            self.mid.into_dart(),
            self.direction.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RtcRtpTransceiver {}
impl rust2dart::IntoIntoDart<RtcRtpTransceiver> for RtcRtpTransceiver {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for RtcSessionDescription {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.sdp.into_into_dart().into_dart(),
            self.kind.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RtcSessionDescription {}
impl rust2dart::IntoIntoDart<RtcSessionDescription> for RtcSessionDescription {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for RtcStats {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.timestamp_us.into_into_dart().into_dart(),
            self.kind.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RtcStats {}
impl rust2dart::IntoIntoDart<RtcStats> for RtcStats {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for RtcStatsIceCandidatePairState {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Frozen => 0,
            Self::Waiting => 1,
            Self::InProgress => 2,
            Self::Failed => 3,
            Self::Succeeded => 4,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RtcStatsIceCandidatePairState {}
impl rust2dart::IntoIntoDart<RtcStatsIceCandidatePairState>
    for RtcStatsIceCandidatePairState
{
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for RtcStatsType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::RtcMediaSourceStats {
                track_identifier,
                kind,
            } => vec![
                0.into_dart(),
                track_identifier.into_dart(),
                kind.into_into_dart().into_dart(),
            ],
            Self::RtcIceCandidateStats(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
            Self::RtcOutboundRtpStreamStats {
                track_id,
                media_type,
                bytes_sent,
                packets_sent,
                media_source_id,
            } => vec![
                2.into_dart(),
                track_id.into_dart(),
                media_type.into_into_dart().into_dart(),
                bytes_sent.into_dart(),
                packets_sent.into_dart(),
                media_source_id.into_dart(),
            ],
            Self::RtcInboundRtpStreamStats {
                remote_id,
                bytes_received,
                packets_received,
                packets_lost,
                jitter,
                total_decode_time,
                jitter_buffer_emitted_count,
                media_type,
            } => vec![
                3.into_dart(),
                remote_id.into_dart(),
                bytes_received.into_dart(),
                packets_received.into_dart(),
                packets_lost.into_dart(),
                jitter.into_dart(),
                total_decode_time.into_dart(),
                jitter_buffer_emitted_count.into_dart(),
                media_type.into_dart(),
            ],
            Self::RtcIceCandidatePairStats {
                state,
                nominated,
                bytes_sent,
                bytes_received,
                total_round_trip_time,
                current_round_trip_time,
                available_outgoing_bitrate,
            } => vec![
                4.into_dart(),
                state.into_into_dart().into_dart(),
                nominated.into_dart(),
                bytes_sent.into_dart(),
                bytes_received.into_dart(),
                total_round_trip_time.into_dart(),
                current_round_trip_time.into_dart(),
                available_outgoing_bitrate.into_dart(),
            ],
            Self::RtcTransportStats {
                packets_sent,
                packets_received,
                bytes_sent,
                bytes_received,
                ice_role,
            } => vec![
                5.into_dart(),
                packets_sent.into_dart(),
                packets_received.into_dart(),
                bytes_sent.into_dart(),
                bytes_received.into_dart(),
                ice_role.into_dart(),
            ],
            Self::RtcRemoteInboundRtpStreamStats {
                local_id,
                jitter,
                round_trip_time,
                fraction_lost,
                reports_received,
                round_trip_time_measurements,
            } => vec![
                6.into_dart(),
                local_id.into_dart(),
                jitter.into_dart(),
                round_trip_time.into_dart(),
                fraction_lost.into_dart(),
                reports_received.into_dart(),
                round_trip_time_measurements.into_dart(),
            ],
            Self::RtcRemoteOutboundRtpStreamStats {
                local_id,
                remote_timestamp,
                reports_sent,
            } => vec![
                7.into_dart(),
                local_id.into_dart(),
                remote_timestamp.into_dart(),
                reports_sent.into_dart(),
            ],
            Self::Unimplemented => vec![8.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RtcStatsType {}
impl rust2dart::IntoIntoDart<RtcStatsType> for RtcStatsType {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for RtcTrackEvent {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.track.into_into_dart().into_dart(),
            self.transceiver.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RtcTrackEvent {}
impl rust2dart::IntoIntoDart<RtcTrackEvent> for RtcTrackEvent {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for RtpTransceiverDirection {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::SendRecv => 0,
            Self::SendOnly => 1,
            Self::RecvOnly => 2,
            Self::Inactive => 3,
            Self::Stopped => 4,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RtpTransceiverDirection {}
impl rust2dart::IntoIntoDart<RtpTransceiverDirection>
    for RtpTransceiverDirection
{
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for SdpType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Offer => 0,
            Self::PrAnswer => 1,
            Self::Answer => 2,
            Self::Rollback => 3,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for SdpType {}
impl rust2dart::IntoIntoDart<SdpType> for SdpType {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for SignalingState {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Stable => 0,
            Self::HaveLocalOffer => 1,
            Self::HaveLocalPrAnswer => 2,
            Self::HaveRemoteOffer => 3,
            Self::HaveRemotePrAnswer => 4,
            Self::Closed => 5,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for SignalingState {}
impl rust2dart::IntoIntoDart<SignalingState> for SignalingState {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for TextureEvent {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::OnTextureChange {
                texture_id,
                width,
                height,
                rotation,
            } => vec![
                0.into_dart(),
                texture_id.into_into_dart().into_dart(),
                width.into_into_dart().into_dart(),
                height.into_into_dart().into_dart(),
                rotation.into_into_dart().into_dart(),
            ],
            Self::OnFirstFrameRendered { texture_id } => {
                vec![1.into_dart(), texture_id.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TextureEvent {}
impl rust2dart::IntoIntoDart<TextureEvent> for TextureEvent {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for TrackEvent {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Ended => 0,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TrackEvent {}
impl rust2dart::IntoIntoDart<TrackEvent> for TrackEvent {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for TrackState {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Live => 0,
            Self::Ended => 1,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TrackState {}
impl rust2dart::IntoIntoDart<TrackState> for TrackState {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler =
        Default::default();
}

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_enable_fake_media(port_: i64) {
        wire_enable_fake_media_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_is_fake_media(port_: i64) {
        wire_is_fake_media_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_enumerate_devices(port_: i64) {
        wire_enumerate_devices_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_enumerate_displays(port_: i64) {
        wire_enumerate_displays_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_create_peer_connection(
        port_: i64,
        configuration: *mut wire_RtcConfiguration,
    ) {
        wire_create_peer_connection_impl(port_, configuration)
    }

    #[no_mangle]
    pub extern "C" fn wire_create_offer(
        port_: i64,
        peer: wire_ArcPeerConnection,
        voice_activity_detection: bool,
        ice_restart: bool,
        use_rtp_mux: bool,
    ) {
        wire_create_offer_impl(
            port_,
            peer,
            voice_activity_detection,
            ice_restart,
            use_rtp_mux,
        )
    }

    #[no_mangle]
    pub extern "C" fn wire_create_answer(
        port_: i64,
        peer: wire_ArcPeerConnection,
        voice_activity_detection: bool,
        ice_restart: bool,
        use_rtp_mux: bool,
    ) {
        wire_create_answer_impl(
            port_,
            peer,
            voice_activity_detection,
            ice_restart,
            use_rtp_mux,
        )
    }

    #[no_mangle]
    pub extern "C" fn wire_create_transceiver_init(port_: i64) {
        wire_create_transceiver_init_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_set_transceiver_init_direction(
        port_: i64,
        init: wire_ArcRtpTransceiverInit,
        direction: i32,
    ) {
        wire_set_transceiver_init_direction_impl(port_, init, direction)
    }

    #[no_mangle]
    pub extern "C" fn wire_add_transceiver_init_send_encoding(
        port_: i64,
        init: wire_ArcRtpTransceiverInit,
        enc: wire_ArcRtpEncodingParameters,
    ) {
        wire_add_transceiver_init_send_encoding_impl(port_, init, enc)
    }

    #[no_mangle]
    pub extern "C" fn wire_create_encoding_parameters(
        port_: i64,
        rid: *mut wire_uint_8_list,
        active: bool,
        max_bitrate: *mut i32,
        max_framerate: *mut f64,
        scale_resolution_down_by: *mut f64,
        scalability_mode: *mut wire_uint_8_list,
    ) {
        wire_create_encoding_parameters_impl(
            port_,
            rid,
            active,
            max_bitrate,
            max_framerate,
            scale_resolution_down_by,
            scalability_mode,
        )
    }

    #[no_mangle]
    pub extern "C" fn wire_set_local_description(
        port_: i64,
        peer: wire_ArcPeerConnection,
        kind: i32,
        sdp: *mut wire_uint_8_list,
    ) {
        wire_set_local_description_impl(port_, peer, kind, sdp)
    }

    #[no_mangle]
    pub extern "C" fn wire_set_remote_description(
        port_: i64,
        peer: wire_ArcPeerConnection,
        kind: i32,
        sdp: *mut wire_uint_8_list,
    ) {
        wire_set_remote_description_impl(port_, peer, kind, sdp)
    }

    #[no_mangle]
    pub extern "C" fn wire_add_transceiver(
        port_: i64,
        peer: wire_ArcPeerConnection,
        media_type: i32,
        init: wire_ArcRtpTransceiverInit,
    ) {
        wire_add_transceiver_impl(port_, peer, media_type, init)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_transceivers(
        port_: i64,
        peer: wire_ArcPeerConnection,
    ) {
        wire_get_transceivers_impl(port_, peer)
    }

    #[no_mangle]
    pub extern "C" fn wire_set_transceiver_direction(
        transceiver: wire_ArcRtpTransceiver,
        direction: i32,
    ) -> support::WireSyncReturn {
        wire_set_transceiver_direction_impl(transceiver, direction)
    }

    #[no_mangle]
    pub extern "C" fn wire_set_transceiver_recv(
        transceiver: wire_ArcRtpTransceiver,
        recv: bool,
    ) -> support::WireSyncReturn {
        wire_set_transceiver_recv_impl(transceiver, recv)
    }

    #[no_mangle]
    pub extern "C" fn wire_set_transceiver_send(
        transceiver: wire_ArcRtpTransceiver,
        send: bool,
    ) -> support::WireSyncReturn {
        wire_set_transceiver_send_impl(transceiver, send)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_transceiver_mid(
        port_: i64,
        transceiver: wire_ArcRtpTransceiver,
    ) {
        wire_get_transceiver_mid_impl(port_, transceiver)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_transceiver_direction(
        port_: i64,
        transceiver: wire_ArcRtpTransceiver,
    ) {
        wire_get_transceiver_direction_impl(port_, transceiver)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_peer_stats(
        port_: i64,
        peer: wire_ArcPeerConnection,
    ) {
        wire_get_peer_stats_impl(port_, peer)
    }

    #[no_mangle]
    pub extern "C" fn wire_stop_transceiver(
        port_: i64,
        transceiver: wire_ArcRtpTransceiver,
    ) {
        wire_stop_transceiver_impl(port_, transceiver)
    }

    #[no_mangle]
    pub extern "C" fn wire_sender_replace_track(
        port_: i64,
        peer: wire_ArcPeerConnection,
        transceiver: wire_ArcRtpTransceiver,
        track_id: *mut wire_uint_8_list,
    ) {
        wire_sender_replace_track_impl(port_, peer, transceiver, track_id)
    }

    #[no_mangle]
    pub extern "C" fn wire_add_ice_candidate(
        port_: i64,
        peer: wire_ArcPeerConnection,
        candidate: *mut wire_uint_8_list,
        sdp_mid: *mut wire_uint_8_list,
        sdp_mline_index: i32,
    ) {
        wire_add_ice_candidate_impl(
            port_,
            peer,
            candidate,
            sdp_mid,
            sdp_mline_index,
        )
    }

    #[no_mangle]
    pub extern "C" fn wire_restart_ice(
        port_: i64,
        peer: wire_ArcPeerConnection,
    ) {
        wire_restart_ice_impl(port_, peer)
    }

    #[no_mangle]
    pub extern "C" fn wire_dispose_peer_connection(
        port_: i64,
        peer: wire_ArcPeerConnection,
    ) {
        wire_dispose_peer_connection_impl(port_, peer)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_media(
        port_: i64,
        constraints: *mut wire_MediaStreamConstraints,
    ) {
        wire_get_media_impl(port_, constraints)
    }

    #[no_mangle]
    pub extern "C" fn wire_set_audio_playout_device(
        port_: i64,
        device_id: *mut wire_uint_8_list,
    ) {
        wire_set_audio_playout_device_impl(port_, device_id)
    }

    #[no_mangle]
    pub extern "C" fn wire_microphone_volume_is_available(port_: i64) {
        wire_microphone_volume_is_available_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_set_microphone_volume(port_: i64, level: u8) {
        wire_set_microphone_volume_impl(port_, level)
    }

    #[no_mangle]
    pub extern "C" fn wire_microphone_volume(port_: i64) {
        wire_microphone_volume_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_dispose_track(
        port_: i64,
        track_id: *mut wire_uint_8_list,
        kind: i32,
    ) {
        wire_dispose_track_impl(port_, track_id, kind)
    }

    #[no_mangle]
    pub extern "C" fn wire_track_state(
        port_: i64,
        track_id: *mut wire_uint_8_list,
        kind: i32,
    ) {
        wire_track_state_impl(port_, track_id, kind)
    }

    #[no_mangle]
    pub extern "C" fn wire_set_track_enabled(
        port_: i64,
        track_id: *mut wire_uint_8_list,
        kind: i32,
        enabled: bool,
    ) {
        wire_set_track_enabled_impl(port_, track_id, kind, enabled)
    }

    #[no_mangle]
    pub extern "C" fn wire_clone_track(
        port_: i64,
        track_id: *mut wire_uint_8_list,
        kind: i32,
    ) {
        wire_clone_track_impl(port_, track_id, kind)
    }

    #[no_mangle]
    pub extern "C" fn wire_register_track_observer(
        port_: i64,
        track_id: *mut wire_uint_8_list,
        kind: i32,
    ) {
        wire_register_track_observer_impl(port_, track_id, kind)
    }

    #[no_mangle]
    pub extern "C" fn wire_set_on_device_changed(port_: i64) {
        wire_set_on_device_changed_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_create_video_sink(
        port_: i64,
        sink_id: i64,
        track_id: *mut wire_uint_8_list,
        callback_ptr: u64,
        texture_id: i64,
    ) {
        wire_create_video_sink_impl(
            port_,
            sink_id,
            track_id,
            callback_ptr,
            texture_id,
        )
    }

    #[no_mangle]
    pub extern "C" fn wire_dispose_video_sink(port_: i64, sink_id: i64) {
        wire_dispose_video_sink_impl(port_, sink_id)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_ArcPeerConnection() -> wire_ArcPeerConnection {
        wire_ArcPeerConnection::new_with_null_ptr()
    }

    #[no_mangle]
    pub extern "C" fn new_ArcRtpEncodingParameters(
    ) -> wire_ArcRtpEncodingParameters {
        wire_ArcRtpEncodingParameters::new_with_null_ptr()
    }

    #[no_mangle]
    pub extern "C" fn new_ArcRtpTransceiver() -> wire_ArcRtpTransceiver {
        wire_ArcRtpTransceiver::new_with_null_ptr()
    }

    #[no_mangle]
    pub extern "C" fn new_ArcRtpTransceiverInit() -> wire_ArcRtpTransceiverInit
    {
        wire_ArcRtpTransceiverInit::new_with_null_ptr()
    }

    #[no_mangle]
    pub extern "C" fn new_StringList_0(len: i32) -> *mut wire_StringList {
        let wrap = wire_StringList {
            ptr: support::new_leak_vec_ptr(
                <*mut wire_uint_8_list>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_audio_constraints_0(
    ) -> *mut wire_AudioConstraints {
        support::new_leak_box_ptr(wire_AudioConstraints::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_f64_0(value: f64) -> *mut f64 {
        support::new_leak_box_ptr(value)
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_i32_0(value: i32) -> *mut i32 {
        support::new_leak_box_ptr(value)
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_media_stream_constraints_0(
    ) -> *mut wire_MediaStreamConstraints {
        support::new_leak_box_ptr(
            wire_MediaStreamConstraints::new_with_null_ptr(),
        )
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_rtc_configuration_0(
    ) -> *mut wire_RtcConfiguration {
        support::new_leak_box_ptr(wire_RtcConfiguration::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_video_constraints_0(
    ) -> *mut wire_VideoConstraints {
        support::new_leak_box_ptr(wire_VideoConstraints::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_list_rtc_ice_server_0(
        len: i32,
    ) -> *mut wire_list_rtc_ice_server {
        let wrap = wire_list_rtc_ice_server {
            ptr: support::new_leak_vec_ptr(
                <wire_RtcIceServer>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_0(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    #[no_mangle]
    pub extern "C" fn drop_opaque_ArcPeerConnection(ptr: *const c_void) {
        unsafe {
            Arc::<Arc<PeerConnection>>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn share_opaque_ArcPeerConnection(
        ptr: *const c_void,
    ) -> *const c_void {
        unsafe {
            Arc::<Arc<PeerConnection>>::increment_strong_count(ptr as _);
            ptr
        }
    }

    #[no_mangle]
    pub extern "C" fn drop_opaque_ArcRtpEncodingParameters(ptr: *const c_void) {
        unsafe {
            Arc::<Arc<RtpEncodingParameters>>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn share_opaque_ArcRtpEncodingParameters(
        ptr: *const c_void,
    ) -> *const c_void {
        unsafe {
            Arc::<Arc<RtpEncodingParameters>>::increment_strong_count(ptr as _);
            ptr
        }
    }

    #[no_mangle]
    pub extern "C" fn drop_opaque_ArcRtpTransceiver(ptr: *const c_void) {
        unsafe {
            Arc::<Arc<RtpTransceiver>>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn share_opaque_ArcRtpTransceiver(
        ptr: *const c_void,
    ) -> *const c_void {
        unsafe {
            Arc::<Arc<RtpTransceiver>>::increment_strong_count(ptr as _);
            ptr
        }
    }

    #[no_mangle]
    pub extern "C" fn drop_opaque_ArcRtpTransceiverInit(ptr: *const c_void) {
        unsafe {
            Arc::<Arc<RtpTransceiverInit>>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn share_opaque_ArcRtpTransceiverInit(
        ptr: *const c_void,
    ) -> *const c_void {
        unsafe {
            Arc::<Arc<RtpTransceiverInit>>::increment_strong_count(ptr as _);
            ptr
        }
    }

    // Section: impl Wire2Api

    impl Wire2Api<RustOpaque<Arc<PeerConnection>>> for wire_ArcPeerConnection {
        fn wire2api(self) -> RustOpaque<Arc<PeerConnection>> {
            unsafe { support::opaque_from_dart(self.ptr as _) }
        }
    }
    impl Wire2Api<RustOpaque<Arc<RtpEncodingParameters>>>
        for wire_ArcRtpEncodingParameters
    {
        fn wire2api(self) -> RustOpaque<Arc<RtpEncodingParameters>> {
            unsafe { support::opaque_from_dart(self.ptr as _) }
        }
    }
    impl Wire2Api<RustOpaque<Arc<RtpTransceiver>>> for wire_ArcRtpTransceiver {
        fn wire2api(self) -> RustOpaque<Arc<RtpTransceiver>> {
            unsafe { support::opaque_from_dart(self.ptr as _) }
        }
    }
    impl Wire2Api<RustOpaque<Arc<RtpTransceiverInit>>>
        for wire_ArcRtpTransceiverInit
    {
        fn wire2api(self) -> RustOpaque<Arc<RtpTransceiverInit>> {
            unsafe { support::opaque_from_dart(self.ptr as _) }
        }
    }
    impl Wire2Api<String> for *mut wire_uint_8_list {
        fn wire2api(self) -> String {
            let vec: Vec<u8> = self.wire2api();
            String::from_utf8_lossy(&vec).into_owned()
        }
    }
    impl Wire2Api<Vec<String>> for *mut wire_StringList {
        fn wire2api(self) -> Vec<String> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }
    impl Wire2Api<AudioConstraints> for wire_AudioConstraints {
        fn wire2api(self) -> AudioConstraints {
            AudioConstraints {
                device_id: self.device_id.wire2api(),
            }
        }
    }

    impl Wire2Api<AudioConstraints> for *mut wire_AudioConstraints {
        fn wire2api(self) -> AudioConstraints {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<AudioConstraints>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<f64> for *mut f64 {
        fn wire2api(self) -> f64 {
            unsafe { *support::box_from_leak_ptr(self) }
        }
    }
    impl Wire2Api<i32> for *mut i32 {
        fn wire2api(self) -> i32 {
            unsafe { *support::box_from_leak_ptr(self) }
        }
    }
    impl Wire2Api<MediaStreamConstraints> for *mut wire_MediaStreamConstraints {
        fn wire2api(self) -> MediaStreamConstraints {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<MediaStreamConstraints>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<RtcConfiguration> for *mut wire_RtcConfiguration {
        fn wire2api(self) -> RtcConfiguration {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<RtcConfiguration>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<VideoConstraints> for *mut wire_VideoConstraints {
        fn wire2api(self) -> VideoConstraints {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<VideoConstraints>::wire2api(*wrap).into()
        }
    }

    impl Wire2Api<Vec<RtcIceServer>> for *mut wire_list_rtc_ice_server {
        fn wire2api(self) -> Vec<RtcIceServer> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }
    impl Wire2Api<MediaStreamConstraints> for wire_MediaStreamConstraints {
        fn wire2api(self) -> MediaStreamConstraints {
            MediaStreamConstraints {
                audio: self.audio.wire2api(),
                video: self.video.wire2api(),
            }
        }
    }

    impl Wire2Api<RtcConfiguration> for wire_RtcConfiguration {
        fn wire2api(self) -> RtcConfiguration {
            RtcConfiguration {
                ice_transport_policy: self.ice_transport_policy.wire2api(),
                bundle_policy: self.bundle_policy.wire2api(),
                ice_servers: self.ice_servers.wire2api(),
            }
        }
    }
    impl Wire2Api<RtcIceServer> for wire_RtcIceServer {
        fn wire2api(self) -> RtcIceServer {
            RtcIceServer {
                urls: self.urls.wire2api(),
                username: self.username.wire2api(),
                credential: self.credential.wire2api(),
            }
        }
    }

    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    impl Wire2Api<VideoConstraints> for wire_VideoConstraints {
        fn wire2api(self) -> VideoConstraints {
            VideoConstraints {
                device_id: self.device_id.wire2api(),
                width: self.width.wire2api(),
                height: self.height.wire2api(),
                frame_rate: self.frame_rate.wire2api(),
                is_display: self.is_display.wire2api(),
            }
        }
    }
    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_ArcPeerConnection {
        ptr: *const core::ffi::c_void,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_ArcRtpEncodingParameters {
        ptr: *const core::ffi::c_void,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_ArcRtpTransceiver {
        ptr: *const core::ffi::c_void,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_ArcRtpTransceiverInit {
        ptr: *const core::ffi::c_void,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_StringList {
        ptr: *mut *mut wire_uint_8_list,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_AudioConstraints {
        device_id: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_list_rtc_ice_server {
        ptr: *mut wire_RtcIceServer,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_MediaStreamConstraints {
        audio: *mut wire_AudioConstraints,
        video: *mut wire_VideoConstraints,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_RtcConfiguration {
        ice_transport_policy: i32,
        bundle_policy: i32,
        ice_servers: *mut wire_list_rtc_ice_server,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_RtcIceServer {
        urls: *mut wire_StringList,
        username: *mut wire_uint_8_list,
        credential: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_VideoConstraints {
        device_id: *mut wire_uint_8_list,
        width: u32,
        height: u32,
        frame_rate: u32,
        is_display: bool,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }

    impl NewWithNullPtr for wire_ArcPeerConnection {
        fn new_with_null_ptr() -> Self {
            Self {
                ptr: core::ptr::null(),
            }
        }
    }
    impl NewWithNullPtr for wire_ArcRtpEncodingParameters {
        fn new_with_null_ptr() -> Self {
            Self {
                ptr: core::ptr::null(),
            }
        }
    }
    impl NewWithNullPtr for wire_ArcRtpTransceiver {
        fn new_with_null_ptr() -> Self {
            Self {
                ptr: core::ptr::null(),
            }
        }
    }
    impl NewWithNullPtr for wire_ArcRtpTransceiverInit {
        fn new_with_null_ptr() -> Self {
            Self {
                ptr: core::ptr::null(),
            }
        }
    }

    impl NewWithNullPtr for wire_AudioConstraints {
        fn new_with_null_ptr() -> Self {
            Self {
                device_id: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_AudioConstraints {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_MediaStreamConstraints {
        fn new_with_null_ptr() -> Self {
            Self {
                audio: core::ptr::null_mut(),
                video: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_MediaStreamConstraints {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_RtcConfiguration {
        fn new_with_null_ptr() -> Self {
            Self {
                ice_transport_policy: Default::default(),
                bundle_policy: Default::default(),
                ice_servers: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_RtcConfiguration {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_RtcIceServer {
        fn new_with_null_ptr() -> Self {
            Self {
                urls: core::ptr::null_mut(),
                username: core::ptr::null_mut(),
                credential: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_RtcIceServer {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_VideoConstraints {
        fn new_with_null_ptr() -> Self {
            Self {
                device_id: core::ptr::null_mut(),
                width: Default::default(),
                height: Default::default(),
                frame_rate: Default::default(),
                is_display: Default::default(),
            }
        }
    }

    impl Default for wire_VideoConstraints {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    // Section: sync execution mode utility

    #[no_mangle]
    pub extern "C" fn free_WireSyncReturn(ptr: support::WireSyncReturn) {
        unsafe {
            let _ = support::box_from_leak_ptr(ptr);
        };
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
