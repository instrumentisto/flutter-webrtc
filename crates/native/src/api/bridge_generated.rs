#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.1.

use crate::api::dart::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;

// Section: imports

use crate::api::{
    AudioConstraints, BundlePolicy, CandidateType, GetMediaError,
    IceCandidateStats, IceConnectionState, IceGatheringState, IceRole,
    IceTransportsType, MediaDeviceInfo, MediaDeviceKind, MediaDisplayInfo,
    MediaStreamConstraints, MediaStreamTrack, MediaType, PeerConnectionEvent,
    PeerConnectionState, Protocol, RtcConfiguration, RtcIceCandidateStats,
    RtcIceServer, RtcInboundRtpStreamMediaType, RtcMediaSourceStatsMediaType,
    RtcOutboundRtpStreamStatsMediaType, RtcRtpTransceiver,
    RtcSessionDescription, RtcStats, RtcStatsIceCandidatePairState,
    RtcStatsType, RtcTrackEvent, RtpTransceiverDirection, SdpType,
    SignalingState, TrackEvent, TrackState, VideoConstraints,
};

// Section: wire functions

fn wire_create_peer_connection_impl(
    port_: MessagePort,
    configuration: impl Wire2Api<RtcConfiguration> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_peer_connection",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_configuration = configuration.wire2api();
            move |task_callback| {
                create_peer_connection(
                    task_callback.stream_sink(),
                    api_configuration,
                )
            }
        },
    )
}
fn wire_register_track_observer_impl(
    port_: MessagePort,
    track_id: impl Wire2Api<String> + UnwindSafe,
    kind: impl Wire2Api<MediaType> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "register_track_observer",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_track_id = track_id.wire2api();
            let api_kind = kind.wire2api();
            move |task_callback| {
                register_track_observer(
                    task_callback.stream_sink(),
                    api_track_id,
                    api_kind,
                )
            }
        },
    )
}
fn wire_set_on_device_changed_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "set_on_device_changed",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                set_on_device_changed(task_callback.stream_sink())
            }
        },
    )
}
fn wire_get_media_impl(
    port_: MessagePort,
    constraints: impl Wire2Api<MediaStreamConstraints> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_media",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_constraints = constraints.wire2api();
            move |task_callback| Ok(get_media(api_constraints))
        },
    )
}
fn wire_enable_fake_media_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "enable_fake_media",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(enable_fake_media()),
    )
}
fn wire_is_fake_media_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "is_fake_media",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(is_fake_media()),
    )
}
fn wire_enumerate_devices_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "enumerate_devices",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| enumerate_devices(),
    )
}
fn wire_enumerate_displays_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "enumerate_displays",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(enumerate_displays()),
    )
}
fn wire_create_offer_impl(
    port_: MessagePort,
    peer_id: impl Wire2Api<u64> + UnwindSafe,
    voice_activity_detection: impl Wire2Api<bool> + UnwindSafe,
    ice_restart: impl Wire2Api<bool> + UnwindSafe,
    use_rtp_mux: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_offer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer_id = peer_id.wire2api();
            let api_voice_activity_detection =
                voice_activity_detection.wire2api();
            let api_ice_restart = ice_restart.wire2api();
            let api_use_rtp_mux = use_rtp_mux.wire2api();
            move |task_callback| {
                create_offer(
                    api_peer_id,
                    api_voice_activity_detection,
                    api_ice_restart,
                    api_use_rtp_mux,
                )
            }
        },
    )
}
fn wire_create_answer_impl(
    port_: MessagePort,
    peer_id: impl Wire2Api<u64> + UnwindSafe,
    voice_activity_detection: impl Wire2Api<bool> + UnwindSafe,
    ice_restart: impl Wire2Api<bool> + UnwindSafe,
    use_rtp_mux: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_answer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer_id = peer_id.wire2api();
            let api_voice_activity_detection =
                voice_activity_detection.wire2api();
            let api_ice_restart = ice_restart.wire2api();
            let api_use_rtp_mux = use_rtp_mux.wire2api();
            move |task_callback| {
                create_answer(
                    api_peer_id,
                    api_voice_activity_detection,
                    api_ice_restart,
                    api_use_rtp_mux,
                )
            }
        },
    )
}
fn wire_set_local_description_impl(
    port_: MessagePort,
    peer_id: impl Wire2Api<u64> + UnwindSafe,
    kind: impl Wire2Api<SdpType> + UnwindSafe,
    sdp: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "set_local_description",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer_id = peer_id.wire2api();
            let api_kind = kind.wire2api();
            let api_sdp = sdp.wire2api();
            move |task_callback| {
                set_local_description(api_peer_id, api_kind, api_sdp)
            }
        },
    )
}
fn wire_set_remote_description_impl(
    port_: MessagePort,
    peer_id: impl Wire2Api<u64> + UnwindSafe,
    kind: impl Wire2Api<SdpType> + UnwindSafe,
    sdp: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "set_remote_description",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer_id = peer_id.wire2api();
            let api_kind = kind.wire2api();
            let api_sdp = sdp.wire2api();
            move |task_callback| {
                set_remote_description(api_peer_id, api_kind, api_sdp)
            }
        },
    )
}
fn wire_add_transceiver_impl(
    port_: MessagePort,
    peer_id: impl Wire2Api<u64> + UnwindSafe,
    media_type: impl Wire2Api<MediaType> + UnwindSafe,
    direction: impl Wire2Api<RtpTransceiverDirection> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "add_transceiver",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer_id = peer_id.wire2api();
            let api_media_type = media_type.wire2api();
            let api_direction = direction.wire2api();
            move |task_callback| {
                add_transceiver(api_peer_id, api_media_type, api_direction)
            }
        },
    )
}
fn wire_get_transceivers_impl(
    port_: MessagePort,
    peer_id: impl Wire2Api<u64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_transceivers",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer_id = peer_id.wire2api();
            move |task_callback| get_transceivers(api_peer_id)
        },
    )
}
fn wire_set_transceiver_direction_impl(
    port_: MessagePort,
    peer_id: impl Wire2Api<u64> + UnwindSafe,
    transceiver_index: impl Wire2Api<u32> + UnwindSafe,
    direction: impl Wire2Api<RtpTransceiverDirection> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "set_transceiver_direction",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer_id = peer_id.wire2api();
            let api_transceiver_index = transceiver_index.wire2api();
            let api_direction = direction.wire2api();
            move |task_callback| {
                set_transceiver_direction(
                    api_peer_id,
                    api_transceiver_index,
                    api_direction,
                )
            }
        },
    )
}
fn wire_set_transceiver_recv_impl(
    port_: MessagePort,
    peer_id: impl Wire2Api<u64> + UnwindSafe,
    transceiver_index: impl Wire2Api<u32> + UnwindSafe,
    recv: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "set_transceiver_recv",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer_id = peer_id.wire2api();
            let api_transceiver_index = transceiver_index.wire2api();
            let api_recv = recv.wire2api();
            move |task_callback| {
                set_transceiver_recv(
                    api_peer_id,
                    api_transceiver_index,
                    api_recv,
                )
            }
        },
    )
}
fn wire_set_transceiver_send_impl(
    port_: MessagePort,
    peer_id: impl Wire2Api<u64> + UnwindSafe,
    transceiver_index: impl Wire2Api<u32> + UnwindSafe,
    send: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "set_transceiver_send",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer_id = peer_id.wire2api();
            let api_transceiver_index = transceiver_index.wire2api();
            let api_send = send.wire2api();
            move |task_callback| {
                set_transceiver_send(
                    api_peer_id,
                    api_transceiver_index,
                    api_send,
                )
            }
        },
    )
}
fn wire_get_transceiver_mid_impl(
    port_: MessagePort,
    peer_id: impl Wire2Api<u64> + UnwindSafe,
    transceiver_index: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_transceiver_mid",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer_id = peer_id.wire2api();
            let api_transceiver_index = transceiver_index.wire2api();
            move |task_callback| {
                get_transceiver_mid(api_peer_id, api_transceiver_index)
            }
        },
    )
}
fn wire_get_transceiver_direction_impl(
    port_: MessagePort,
    peer_id: impl Wire2Api<u64> + UnwindSafe,
    transceiver_index: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_transceiver_direction",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer_id = peer_id.wire2api();
            let api_transceiver_index = transceiver_index.wire2api();
            move |task_callback| {
                get_transceiver_direction(api_peer_id, api_transceiver_index)
            }
        },
    )
}
fn wire_get_peer_stats_impl(
    port_: MessagePort,
    peer_id: impl Wire2Api<u64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_peer_stats",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer_id = peer_id.wire2api();
            move |task_callback| get_peer_stats(api_peer_id)
        },
    )
}
fn wire_stop_transceiver_impl(
    port_: MessagePort,
    peer_id: impl Wire2Api<u64> + UnwindSafe,
    transceiver_index: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "stop_transceiver",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer_id = peer_id.wire2api();
            let api_transceiver_index = transceiver_index.wire2api();
            move |task_callback| {
                stop_transceiver(api_peer_id, api_transceiver_index)
            }
        },
    )
}
fn wire_sender_replace_track_impl(
    port_: MessagePort,
    peer_id: impl Wire2Api<u64> + UnwindSafe,
    transceiver_index: impl Wire2Api<u32> + UnwindSafe,
    track_id: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "sender_replace_track",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer_id = peer_id.wire2api();
            let api_transceiver_index = transceiver_index.wire2api();
            let api_track_id = track_id.wire2api();
            move |task_callback| {
                sender_replace_track(
                    api_peer_id,
                    api_transceiver_index,
                    api_track_id,
                )
            }
        },
    )
}
fn wire_add_ice_candidate_impl(
    port_: MessagePort,
    peer_id: impl Wire2Api<u64> + UnwindSafe,
    candidate: impl Wire2Api<String> + UnwindSafe,
    sdp_mid: impl Wire2Api<String> + UnwindSafe,
    sdp_mline_index: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "add_ice_candidate",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer_id = peer_id.wire2api();
            let api_candidate = candidate.wire2api();
            let api_sdp_mid = sdp_mid.wire2api();
            let api_sdp_mline_index = sdp_mline_index.wire2api();
            move |task_callback| {
                add_ice_candidate(
                    api_peer_id,
                    api_candidate,
                    api_sdp_mid,
                    api_sdp_mline_index,
                )
            }
        },
    )
}
fn wire_restart_ice_impl(
    port_: MessagePort,
    peer_id: impl Wire2Api<u64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "restart_ice",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer_id = peer_id.wire2api();
            move |task_callback| restart_ice(api_peer_id)
        },
    )
}
fn wire_dispose_peer_connection_impl(
    port_: MessagePort,
    peer_id: impl Wire2Api<u64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "dispose_peer_connection",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer_id = peer_id.wire2api();
            move |task_callback| Ok(dispose_peer_connection(api_peer_id))
        },
    )
}
fn wire_set_audio_playout_device_impl(
    port_: MessagePort,
    device_id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "set_audio_playout_device",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_device_id = device_id.wire2api();
            move |task_callback| set_audio_playout_device(api_device_id)
        },
    )
}
fn wire_microphone_volume_is_available_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "microphone_volume_is_available",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| microphone_volume_is_available(),
    )
}
fn wire_set_microphone_volume_impl(
    port_: MessagePort,
    level: impl Wire2Api<u8> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "set_microphone_volume",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_level = level.wire2api();
            move |task_callback| set_microphone_volume(api_level)
        },
    )
}
fn wire_microphone_volume_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "microphone_volume",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| microphone_volume(),
    )
}
fn wire_dispose_track_impl(
    port_: MessagePort,
    track_id: impl Wire2Api<String> + UnwindSafe,
    kind: impl Wire2Api<MediaType> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "dispose_track",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_track_id = track_id.wire2api();
            let api_kind = kind.wire2api();
            move |task_callback| Ok(dispose_track(api_track_id, api_kind))
        },
    )
}
fn wire_track_state_impl(
    port_: MessagePort,
    track_id: impl Wire2Api<String> + UnwindSafe,
    kind: impl Wire2Api<MediaType> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "track_state",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_track_id = track_id.wire2api();
            let api_kind = kind.wire2api();
            move |task_callback| track_state(api_track_id, api_kind)
        },
    )
}
fn wire_set_track_enabled_impl(
    port_: MessagePort,
    track_id: impl Wire2Api<String> + UnwindSafe,
    kind: impl Wire2Api<MediaType> + UnwindSafe,
    enabled: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "set_track_enabled",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_track_id = track_id.wire2api();
            let api_kind = kind.wire2api();
            let api_enabled = enabled.wire2api();
            move |task_callback| {
                set_track_enabled(api_track_id, api_kind, api_enabled)
            }
        },
    )
}
fn wire_clone_track_impl(
    port_: MessagePort,
    track_id: impl Wire2Api<String> + UnwindSafe,
    kind: impl Wire2Api<MediaType> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "clone_track",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_track_id = track_id.wire2api();
            let api_kind = kind.wire2api();
            move |task_callback| clone_track(api_track_id, api_kind)
        },
    )
}
fn wire_create_video_sink_impl(
    port_: MessagePort,
    sink_id: impl Wire2Api<i64> + UnwindSafe,
    track_id: impl Wire2Api<String> + UnwindSafe,
    callback_ptr: impl Wire2Api<u64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_video_sink",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_sink_id = sink_id.wire2api();
            let api_track_id = track_id.wire2api();
            let api_callback_ptr = callback_ptr.wire2api();
            move |task_callback| {
                create_video_sink(api_sink_id, api_track_id, api_callback_ptr)
            }
        },
    )
}
fn wire_dispose_video_sink_impl(
    port_: MessagePort,
    sink_id: impl Wire2Api<i64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "dispose_video_sink",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_sink_id = sink_id.wire2api();
            move |task_callback| Ok(dispose_video_sink(api_sink_id))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<BundlePolicy> for i32 {
    fn wire2api(self) -> BundlePolicy {
        match self {
            0 => BundlePolicy::Balanced,
            1 => BundlePolicy::MaxBundle,
            2 => BundlePolicy::MaxCompat,
            _ => unreachable!("Invalid variant for BundlePolicy: {}", self),
        }
    }
}
impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}
impl Wire2Api<IceTransportsType> for i32 {
    fn wire2api(self) -> IceTransportsType {
        match self {
            0 => IceTransportsType::All,
            1 => IceTransportsType::Relay,
            2 => IceTransportsType::NoHost,
            3 => IceTransportsType::None,
            _ => {
                unreachable!("Invalid variant for IceTransportsType: {}", self)
            }
        }
    }
}

impl Wire2Api<MediaType> for i32 {
    fn wire2api(self) -> MediaType {
        match self {
            0 => MediaType::Audio,
            1 => MediaType::Video,
            _ => unreachable!("Invalid variant for MediaType: {}", self),
        }
    }
}

impl Wire2Api<RtpTransceiverDirection> for i32 {
    fn wire2api(self) -> RtpTransceiverDirection {
        match self {
            0 => RtpTransceiverDirection::SendRecv,
            1 => RtpTransceiverDirection::SendOnly,
            2 => RtpTransceiverDirection::RecvOnly,
            3 => RtpTransceiverDirection::Inactive,
            4 => RtpTransceiverDirection::Stopped,
            _ => unreachable!(
                "Invalid variant for RtpTransceiverDirection: {}",
                self
            ),
        }
    }
}
impl Wire2Api<SdpType> for i32 {
    fn wire2api(self) -> SdpType {
        match self {
            0 => SdpType::Offer,
            1 => SdpType::PrAnswer,
            2 => SdpType::Answer,
            3 => SdpType::Rollback,
            _ => unreachable!("Invalid variant for SdpType: {}", self),
        }
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for CandidateType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Host => 0,
            Self::Srflx => 1,
            Self::Prflx => 2,
            Self::Relay => 3,
        }
        .into_dart()
    }
}

impl support::IntoDart for GetMediaError {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Audio(field0) => vec![0.into_dart(), field0.into_dart()],
            Self::Video(field0) => vec![1.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GetMediaError {}
impl support::IntoDart for GetMediaResult {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Ok(field0) => vec![0.into_dart(), field0.into_dart()],
            Self::Err(field0) => vec![1.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GetMediaResult {}

impl support::IntoDart for IceCandidateStats {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.transport_id.into_dart(),
            self.address.into_dart(),
            self.port.into_dart(),
            self.protocol.into_dart(),
            self.candidate_type.into_dart(),
            self.priority.into_dart(),
            self.url.into_dart(),
            self.relay_protocol.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for IceCandidateStats {}

impl support::IntoDart for IceConnectionState {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::New => 0,
            Self::Checking => 1,
            Self::Connected => 2,
            Self::Completed => 3,
            Self::Failed => 4,
            Self::Disconnected => 5,
            Self::Closed => 6,
        }
        .into_dart()
    }
}
impl support::IntoDart for IceGatheringState {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::New => 0,
            Self::Gathering => 1,
            Self::Complete => 2,
        }
        .into_dart()
    }
}
impl support::IntoDart for IceRole {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Unknown => 0,
            Self::Controlling => 1,
            Self::Controlled => 2,
        }
        .into_dart()
    }
}

impl support::IntoDart for MediaDeviceInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.device_id.into_dart(),
            self.kind.into_dart(),
            self.label.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MediaDeviceInfo {}

impl support::IntoDart for MediaDeviceKind {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::AudioInput => 0,
            Self::AudioOutput => 1,
            Self::VideoInput => 2,
        }
        .into_dart()
    }
}
impl support::IntoDart for MediaDisplayInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![self.device_id.into_dart(), self.title.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MediaDisplayInfo {}

impl support::IntoDart for MediaStreamTrack {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_dart(),
            self.device_id.into_dart(),
            self.kind.into_dart(),
            self.enabled.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MediaStreamTrack {}

impl support::IntoDart for MediaType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Audio => 0,
            Self::Video => 1,
        }
        .into_dart()
    }
}

impl support::IntoDart for PeerConnectionEvent {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::PeerCreated { id } => vec![0.into_dart(), id.into_dart()],
            Self::IceCandidate {
                sdp_mid,
                sdp_mline_index,
                candidate,
            } => vec![
                1.into_dart(),
                sdp_mid.into_dart(),
                sdp_mline_index.into_dart(),
                candidate.into_dart(),
            ],
            Self::IceGatheringStateChange(field0) => {
                vec![2.into_dart(), field0.into_dart()]
            }
            Self::IceCandidateError {
                address,
                port,
                url,
                error_code,
                error_text,
            } => vec![
                3.into_dart(),
                address.into_dart(),
                port.into_dart(),
                url.into_dart(),
                error_code.into_dart(),
                error_text.into_dart(),
            ],
            Self::NegotiationNeeded => vec![4.into_dart()],
            Self::SignallingChange(field0) => {
                vec![5.into_dart(), field0.into_dart()]
            }
            Self::IceConnectionStateChange(field0) => {
                vec![6.into_dart(), field0.into_dart()]
            }
            Self::ConnectionStateChange(field0) => {
                vec![7.into_dart(), field0.into_dart()]
            }
            Self::Track(field0) => vec![8.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PeerConnectionEvent {}
impl support::IntoDart for PeerConnectionState {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::New => 0,
            Self::Connecting => 1,
            Self::Connected => 2,
            Self::Disconnected => 3,
            Self::Failed => 4,
            Self::Closed => 5,
        }
        .into_dart()
    }
}
impl support::IntoDart for Protocol {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Tcp => 0,
            Self::Udp => 1,
        }
        .into_dart()
    }
}
impl support::IntoDart for RtcIceCandidateStats {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Local(field0) => vec![0.into_dart(), field0.into_dart()],
            Self::Remote(field0) => vec![1.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RtcIceCandidateStats {}
impl support::IntoDart for RtcInboundRtpStreamMediaType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Audio {
                voice_activity_flag,
                total_samples_received,
                concealed_samples,
                silent_concealed_samples,
                audio_level,
                total_audio_energy,
                total_samples_duration,
            } => vec![
                0.into_dart(),
                voice_activity_flag.into_dart(),
                total_samples_received.into_dart(),
                concealed_samples.into_dart(),
                silent_concealed_samples.into_dart(),
                audio_level.into_dart(),
                total_audio_energy.into_dart(),
                total_samples_duration.into_dart(),
            ],
            Self::Video {
                frames_decoded,
                key_frames_decoded,
                frame_width,
                frame_height,
                total_inter_frame_delay,
                frames_per_second,
                fir_count,
                pli_count,
                sli_count,
                concealment_events,
                frames_received,
            } => vec![
                1.into_dart(),
                frames_decoded.into_dart(),
                key_frames_decoded.into_dart(),
                frame_width.into_dart(),
                frame_height.into_dart(),
                total_inter_frame_delay.into_dart(),
                frames_per_second.into_dart(),
                fir_count.into_dart(),
                pli_count.into_dart(),
                sli_count.into_dart(),
                concealment_events.into_dart(),
                frames_received.into_dart(),
            ],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RtcInboundRtpStreamMediaType {}
impl support::IntoDart for RtcMediaSourceStatsMediaType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::RtcVideoSourceStats {
                width,
                height,
                frames,
                frames_per_second,
            } => vec![
                0.into_dart(),
                width.into_dart(),
                height.into_dart(),
                frames.into_dart(),
                frames_per_second.into_dart(),
            ],
            Self::RtcAudioSourceStats {
                audio_level,
                total_audio_energy,
                total_samples_duration,
                echo_return_loss,
                echo_return_loss_enhancement,
            } => vec![
                1.into_dart(),
                audio_level.into_dart(),
                total_audio_energy.into_dart(),
                total_samples_duration.into_dart(),
                echo_return_loss.into_dart(),
                echo_return_loss_enhancement.into_dart(),
            ],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RtcMediaSourceStatsMediaType {}
impl support::IntoDart for RtcOutboundRtpStreamStatsMediaType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Audio {
                total_samples_sent,
                voice_activity_flag,
            } => vec![
                0.into_dart(),
                total_samples_sent.into_dart(),
                voice_activity_flag.into_dart(),
            ],
            Self::Video {
                frame_width,
                frame_height,
                frames_per_second,
            } => vec![
                1.into_dart(),
                frame_width.into_dart(),
                frame_height.into_dart(),
                frames_per_second.into_dart(),
            ],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RtcOutboundRtpStreamStatsMediaType {}
impl support::IntoDart for RtcRtpTransceiver {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.peer_id.into_dart(),
            self.index.into_dart(),
            self.mid.into_dart(),
            self.direction.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RtcRtpTransceiver {}

impl support::IntoDart for RtcSessionDescription {
    fn into_dart(self) -> support::DartAbi {
        vec![self.sdp.into_dart(), self.kind.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RtcSessionDescription {}

impl support::IntoDart for RtcStats {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_dart(),
            self.timestamp_us.into_dart(),
            self.kind.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RtcStats {}

impl support::IntoDart for RtcStatsIceCandidatePairState {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Frozen => 0,
            Self::Waiting => 1,
            Self::InProgress => 2,
            Self::Failed => 3,
            Self::Succeeded => 4,
        }
        .into_dart()
    }
}
impl support::IntoDart for RtcStatsType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::RtcMediaSourceStats {
                track_identifier,
                kind,
            } => vec![
                0.into_dart(),
                track_identifier.into_dart(),
                kind.into_dart(),
            ],
            Self::RtcIceCandidateStats(field0) => {
                vec![1.into_dart(), field0.into_dart()]
            }
            Self::RtcOutboundRtpStreamStats {
                track_id,
                media_type,
                bytes_sent,
                packets_sent,
                media_source_id,
            } => vec![
                2.into_dart(),
                track_id.into_dart(),
                media_type.into_dart(),
                bytes_sent.into_dart(),
                packets_sent.into_dart(),
                media_source_id.into_dart(),
            ],
            Self::RtcInboundRtpStreamStats {
                remote_id,
                bytes_received,
                packets_received,
                packets_lost,
                jitter,
                total_decode_time,
                jitter_buffer_emitted_count,
                media_type,
            } => vec![
                3.into_dart(),
                remote_id.into_dart(),
                bytes_received.into_dart(),
                packets_received.into_dart(),
                packets_lost.into_dart(),
                jitter.into_dart(),
                total_decode_time.into_dart(),
                jitter_buffer_emitted_count.into_dart(),
                media_type.into_dart(),
            ],
            Self::RtcIceCandidatePairStats {
                state,
                nominated,
                bytes_sent,
                bytes_received,
                total_round_trip_time,
                current_round_trip_time,
                available_outgoing_bitrate,
            } => vec![
                4.into_dart(),
                state.into_dart(),
                nominated.into_dart(),
                bytes_sent.into_dart(),
                bytes_received.into_dart(),
                total_round_trip_time.into_dart(),
                current_round_trip_time.into_dart(),
                available_outgoing_bitrate.into_dart(),
            ],
            Self::RtcTransportStats {
                packets_sent,
                packets_received,
                bytes_sent,
                bytes_received,
                ice_role,
            } => vec![
                5.into_dart(),
                packets_sent.into_dart(),
                packets_received.into_dart(),
                bytes_sent.into_dart(),
                bytes_received.into_dart(),
                ice_role.into_dart(),
            ],
            Self::RtcRemoteInboundRtpStreamStats {
                local_id,
                jitter,
                round_trip_time,
                fraction_lost,
                reports_received,
                round_trip_time_measurements,
            } => vec![
                6.into_dart(),
                local_id.into_dart(),
                jitter.into_dart(),
                round_trip_time.into_dart(),
                fraction_lost.into_dart(),
                reports_received.into_dart(),
                round_trip_time_measurements.into_dart(),
            ],
            Self::RtcRemoteOutboundRtpStreamStats {
                local_id,
                remote_timestamp,
                reports_sent,
            } => vec![
                7.into_dart(),
                local_id.into_dart(),
                remote_timestamp.into_dart(),
                reports_sent.into_dart(),
            ],
            Self::Unimplemented => vec![8.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RtcStatsType {}
impl support::IntoDart for RtcTrackEvent {
    fn into_dart(self) -> support::DartAbi {
        vec![self.track.into_dart(), self.transceiver.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RtcTrackEvent {}

impl support::IntoDart for RtpTransceiverDirection {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::SendRecv => 0,
            Self::SendOnly => 1,
            Self::RecvOnly => 2,
            Self::Inactive => 3,
            Self::Stopped => 4,
        }
        .into_dart()
    }
}
impl support::IntoDart for SdpType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Offer => 0,
            Self::PrAnswer => 1,
            Self::Answer => 2,
            Self::Rollback => 3,
        }
        .into_dart()
    }
}
impl support::IntoDart for SignalingState {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Stable => 0,
            Self::HaveLocalOffer => 1,
            Self::HaveLocalPrAnswer => 2,
            Self::HaveRemoteOffer => 3,
            Self::HaveRemotePrAnswer => 4,
            Self::Closed => 5,
        }
        .into_dart()
    }
}
impl support::IntoDart for TrackEvent {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Ended => 0,
        }
        .into_dart()
    }
}
impl support::IntoDart for TrackState {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Live => 0,
            Self::Ended => 1,
        }
        .into_dart()
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler =
        Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
